type User {
    id: Int!
    username: String!
    email: String!
    password: String!
    token: String
}

type CreateUserResponse {
    success: Boolean!
    message: String!
}

type GetTokenResponse {
    success: Boolean!
    token: String
}

type PublicKeyWithChain {
    chain: Int!
    publicKey: String!
}

input PublicKeyWithMetaData {
    chain: Int!
    publicKey: String!
}

type GetPublicKeyResponse {
    pubkeys: [[PublicKeyWithChain]]!
}

input Logs {
    userPublicKey: String!
    receiverPublicKey: String!
    sourceChain: Int!
    destinationChain: Int!
    typeOfTransfer: Int!
    transferDetails: String
    transactionSignature: String
    gas: String
    status: Int!
}

type GetTransactionLogs {
    userPublicKey: String!
    receiverPublicKey: String!
    sourceChain: Int!
    destinationChain: Int!
    typeOfTransfer: Int!
    transferDetails: String
    transactionSignature: String
    gas: String
    status: Int!
}

type SaveLogsResponse {
    success: Boolean!
    message: String!
}

type Query {
    getuser(token: String): User
    gettoken(username: String, email: String, password: String!): GetTokenResponse!
    getpublickey(token: String): GetPublicKeyResponse!
    gettransactionlogs(token: String): [GetTransactionLogs]! 
}

type Mutation {
    createuser(username: String!, email: String!, password: String!): CreateUserResponse! 
    addpublickey(token: String, pubkey: PublicKeyWithMetaData!): Boolean!
    deletepublickey(token: String, pubkey: PublicKeyWithMetaData!): Boolean! 
    savelogs(token: String, logs: Logs!): SaveLogsResponse!
}