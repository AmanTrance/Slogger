type User {
    id: Int!
    username: String!
    email: String!
    password: String!
    token: String
}

type CreateUserResponse {
    success: Boolean!
    message: String!
}

type GetTokenResponse {
    success: Boolean!
    token: String
}

type PublicKeyWithData {
    chain: Int!
    publicKey: String!
}

input PublicKeyWithMetaData {
    chain: Int!
    publicKey: String!
}

type GetPublicKeyResponse {
    pubkeys: [PublicKeyWithData]!
}

type Query {
    getuser(token: String): User
    gettoken(username: String, email: String, password: String!): GetTokenResponse!
    getpublickey(token: String): GetPublicKeyResponse! 
}

type Mutation {
    createuser(username: String!, email: String!, password: String!): CreateUserResponse! 
    addpublickey(token: String, pubkey: PublicKeyWithMetaData!): Boolean! 
}